class Solution {
public:
    vector<int> dis;
    vector<int> par;
    vector<int> visited;

    void DFS(int node , vector<vector<int>> &adj ,int distance , int parent){
        par[node] = parent;
        dis[node] = distance;
        visited[node] = 1;

        for(auto it : adj[node]){
            //if(it == parent){
                // node calling recursion on parent
                //continue;
            //}
            if(!visited[it]) DFS(it,adj,distance+1,node);
        }
    }

    // Find total sum to each node
    int dfs2(int u,vector<int> &amount,vector<vector<int>> &adj,int p){
        int ret = amount[u];
        int mxc = -INT_MAX;
        for(int v:adj[u]){
            if(v!=p){
                mxc= max(mxc,dfs2(v,amount,adj,u));
            }
        }
		//if the node is leaf we just return its amount
        if(mxc==-INT_MAX)return ret;
        else return ret+mxc;
    }

    int mostProfitablePath(vector<vector<int>>& edges, int bob, vector<int>& amount){
        int n = amount.size();
        for(int i = 0; i < n; i++) visited.push_back(0);

        vector<vector<int>> adj(n);
        for(int i = 0; i < edges.size() ; i++){
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);
        }

        par.resize(n);
        dis.resize(n);
        DFS(0,adj,0,0);

        int cur = bob;
        int bob_dis = 0;
		//update the path of from Bob to 0
        while(cur!=0){
            if(dis[cur]>bob_dis){
                amount[cur] = 0;
            }else if(dis[cur]==bob_dis){
                amount[cur]/=2;
            }
            cur = par[cur];
            bob_dis++;
        }
        
        return dfs2(0,amount,adj,0);
    }
};
