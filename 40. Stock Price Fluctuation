class StockPrice {
public:
    unordered_map<int,int> priceToStockMap;
    int latestTimeStamp;
    multiset<int> prices;

    StockPrice() {
        
    }
    
    void update(int timestamp, int price) {
        
        //if the timestamp is already recorded
        if(priceToStockMap.find(timestamp) != priceToStockMap.end()){
            int oldPrice = priceToStockMap[timestamp];
            prices.erase(prices.find(oldPrice));
        }
        prices.insert(price);
        latestTimeStamp = max(latestTimeStamp , timestamp);
        priceToStockMap[timestamp] = price;
    }
    
    int current() {
        return priceToStockMap[latestTimeStamp];
    }
    
    int maximum() {
        return *prices.rbegin();
    }
    
    int minimum() {
        return *prices.begin();
    }
};

/**
 * Your StockPrice object will be instantiated and called as such:
 * StockPrice* obj = new StockPrice();
 * obj->update(timestamp,price);
 * int param_2 = obj->current();
 * int param_3 = obj->maximum();
 * int param_4 = obj->minimum();
 */
