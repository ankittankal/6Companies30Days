class Solution {
public:
    //T.C : O(nlogn)
    //S.C : O(n)
    int findUnsortedSubarray(vector<int>& nums) {
        int n = nums.size();
        int mini = INT_MAX;
        int maxi = INT_MIN;
        vector<int> unsorted  = nums;
        sort(nums.begin() , nums.end());
         
        for(int i = 0; i < n; i++){
            if(nums[i] != unsorted[i]){
                mini = min(mini , i);
                maxi = max(maxi , i);
            }
        }

        if(mini == INT_MAX) return 0;
        return maxi-mini+1;
    }
    

    //T.C : O(n)
    //S.C : O(n)
    int findUnsortedSubarray(vector<int>& nums) {
        stack<int> st1; //increaing stack
        stack<int> st2; //Decreaing stack
        int n = nums.size();

        int mini = INT_MAX , maxi = INT_MIN;
        for(int i = 0; i < n; i++){
            if(!st1.empty() and nums[st1.top()] > nums[i]){
                while(!st1.empty() and nums[st1.top()] > nums[i]){
                    mini = min(mini , st1.top());
                    st1.pop();
                }
            }
            st1.push(i);
        }

        for(int i = n-1; i >= 0; i--){
            if(!st2.empty() and nums[st2.top()] < nums[i]){
                while(!st2.empty() and nums[st2.top()] < nums[i]){
                    maxi = max(maxi , st2.top());
                    st2.pop();
                }
            }
            st2.push(i);
        }

        if(mini == INT_MAX) return 0;
        return maxi-mini+1;
    }
};
