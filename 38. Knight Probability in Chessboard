//Explanation Link : https://youtu.be/_Gt1nZTgt6w

class Solution {
public:
    vector<int> dx = {-2,-2,-1,-1,2,2,1,1}; 
    vector<int> dy = {-1,1,-2,2,-1,1,-2,2};
    
    double knightProbability(int n, int k, int row, int column) {
        // Initialize 3D dp array to store the probability of knight being on a certain square after k moves
        vector<vector<vector<double>>> dp(k + 1, vector<vector<double>> (n, vector<double>(n, -1)));    
        return helper(n,k,row,column,dp);
    }

    //double prob = 0;
    double helper(int n, int k, int row, int col,vector<vector<vector<double>>> &dp){
        if(row < 0 or row >= n or col <0 or col >= n) return 0;
        // If the knight has made k moves, return 1 as it will be on the chess board
        if(k == 0) return 1;

        if(dp[k][row][col] != -1) return dp[k][row][col];

        double prob = 0;
        for(int i = 0; i < 8; i++){
            double curr = helper(n,k-1,row+dx[i],col+dy[i],dp);
            prob += curr/8.0;
        }
        return dp[k][row][col] = prob;
    }
};
