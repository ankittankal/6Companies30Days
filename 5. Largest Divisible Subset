class Solution {
public:
    vector<int> ans;
    vector<int> dp;
    void helper(int ind , vector<int> &curr , vector<int> &nums , int &maxi , int prev){

        if(ind == nums.size()){
            if(curr.size() > maxi){
                ans = curr;
                maxi = curr.size();
            }
            return;
        }

        //not pick
        helper(ind+1 , curr , nums , maxi , prev);

        //pick
        //We can't directly use curr.size() without typecasting because it will return an unsigned int and hence if() will not work.
        if((int)curr.size() > dp[ind] and nums[ind] % prev == 0){
            dp[ind] = curr.size();
            curr.push_back(nums[ind]);
            helper(ind+1 , curr , nums , maxi , nums[ind]);
            curr.pop_back();
        }
    }

    vector<int> largestDivisibleSubset(vector<int>& nums) {
        vector<int> curr;
        int maxi = 0;
        sort(nums.begin() , nums.end());
        for(int i = 0; i < nums.size() ; i++) dp.push_back(-1);

        helper(0,curr,nums,maxi,1);
        return ans;
    }
};
