//There are Two ways to solve this Question : 
//1. one is using Cycle Detection technique in a directed Graph
//2. Another one is using topo sort Technique

//Below code is the implementation of Cycle Detection Technique
class Solution {
public:
    bool DFS(int node , vector<int> &visited , vector<int> &pathVisited , vector<vector<int>> &adj){
        visited[node] = 1;
        pathVisited[node] = 1;

        for(auto it  : adj[node]){
            if(!visited[it]){
                if(DFS(it , visited , pathVisited , adj)) return true;
            }
            else if(visited[it] and pathVisited[it]) return true;
        }

        pathVisited[node] = 0;
        return false;
    }

    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        
        vector<vector<int>> adj(numCourses);
        for(int i = 0; i < prerequisites.size() ; i++){
           adj[prerequisites[i][0]].push_back(prerequisites[i][1]);
        }

        vector<int> visited(numCourses , 0);
        vector<int> pathVisited(numCourses , 0);

        for(int i = 0; i < numCourses ; i++){
            if(!visited[i]){
                if(DFS(i , visited , pathVisited , adj) == true) return false;
            }
        }

        return true;
    }
};
