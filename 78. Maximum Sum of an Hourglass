class Solution {
public:
    int maxSum(vector<vector<int>>& grid) {
        //find all possible hour glass sums and return maximum among all
        int m = grid.size();
        int n = grid[0].size();
        int maxHourGlass_sum = 0;

        for(int i = 0; i < m-2; i++){
            for(int j = 0; j < n-2; j++){
                int top = grid[i][j] + grid[i][j+1] + grid[i][j+2];
                int middle = grid[i+1][j+1];
                int down = grid[i+2][j] + grid[i+2][j+1] + grid[i+2][j+2];
                int currHourGlass_sum = top + middle + down;

                maxHourGlass_sum = max(maxHourGlass_sum, currHourGlass_sum);
            }
        }

        return maxHourGlass_sum;
    }
};
