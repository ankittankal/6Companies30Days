class Solution {
public:
    int ans = 0;
    // Calculating compatibility scores of ith student and jth mentor
    int calScore(vector<vector<int>> &students, vector<vector<int>> &mentors,
                int index,int i){

        int score = 0;
        for(int j = 0; j < students[0].size(); j++){
            if(students[index][j] == mentors[i][j]) score++;
        }
        return score;
    }

    void helper(int index , vector<vector<int>>& students, vector<vector<int>>& mentors
    ,int currScore, vector<int> &visited){

        if(index >= students.size()){
            ans = max(ans,currScore);
            return;
        }

        for(int i = 0; i < students.size(); i++){
            if(!visited[i]){
                visited[i] = 1;
                int score = calScore(students,mentors,index,i);
                helper(index+1,students,mentors,currScore+score,visited);
                visited[i] = 0;
            }
        }
    }
    int maxCompatibilitySum(vector<vector<int>>& students, vector<vector<int>>& mentors) {
        int n = students.size();
        int currScore = 0;
        vector<int> visited(n,0);
        helper(0,students,mentors,currScore,visited);
        return ans;
    }
};
